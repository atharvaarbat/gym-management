// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id         String          @id @default(uuid())
  name       String
  email      String?
  memberCode String          @unique
  phone      BigInt
  password   String          @default("Test@12345")
  address    String?
  DOB        String
  reviewDone Boolean         @default(false)
  gender     Gender
  DOJ        String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  sales      Sales[]
  attendance Attendance[]
  fitness    FitnessRecord[]
  // diets      DietChart[]
}

model Services {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Int
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sales[]
}

model Sales {
  id          String   @id @default(uuid())
  member_id   String
  service_id  String
  service     Services @relation(fields: [service_id], references: [id])
  description String?
  discount    Int
  amount      Int
  paid        Int
  startDate   String
  endDate     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  member      Member   @relation(fields: [member_id], references: [id])
}

model Attendance {
  id        String   @id @default(uuid())
  member_id String
  member    Member   @relation(fields: [member_id], references: [id])
  date      String
  time      String   @default("00:00:00")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FitnessRecord {
  id          String   @id @default(uuid())
  member_id   String
  member      Member   @relation(fields: [member_id], references: [id])
  date        String
  weight      Int
  height      Int
  chest       Int?
  abs         Int?
  hips        Int?
  thighs      Int?
  treadmill   Int?
  chestPress  Int?
  latPulldown Int?
  squats      Int?
  sitAndReach Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enquiry {
  id           String      @id @default(uuid())
  name         String
  phone        BigInt
  followupDate String?
  message      String?
  type         EnquiryType
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum EnquiryType {
  call
  walkin
  instagram
  whatsapp
}

model ToDo {
  id        String   @id @default(uuid())
  title     String
  completed Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
  other
}

// model DietChart {
//   id          String   @id @default(uuid())
//   member_id   String
//   member      Member   @relation(fields: [member_id], references: [id])
//   date        String
//   conditions  Json
//   meals       Json
//   note        String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model FoodItems {
  id        String   @id @default(uuid())
  name      String
  calories  Int
  recipe    String?
  protein   Int? // grams
  carbs     Int? // grams
  fats      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id              String   @id @default(uuid())
  json_id         String
  name            String
  force           String?
  level           String?
  mechanic        String?
  equipment       String?
  primaryMuscle   String[]
  secondaryMuscle String[]
  instructions    String[]
  category        String?
  images          String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
